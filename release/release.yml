# GitHub Actions workflow for automated releases
# Place this file in .github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.5.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            archive: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cargo for cross compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p ~/.cargo
          cat >> ~/.cargo/config.toml << 'EOF'
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF

      - name: Build binary
        run: |
          cargo build --release --locked --target ${{ matrix.target }} --all-features

      - name: Generate completions
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          mkdir -p completions
          ./target/${{ matrix.target }}/release/reap completion bash > completions/reap.bash
          ./target/${{ matrix.target }}/release/reap completion zsh > completions/reap.zsh
          ./target/${{ matrix.target }}/release/reap completion fish > completions/reap.fish

      - name: Create archive
        run: |
          mkdir -p dist
          
          # Copy binary
          cp target/${{ matrix.target }}/release/reap dist/
          
          # Copy documentation
          cp README.md FEATURES.md SECURITY.md CHANGELOG.md LICENSE dist/
          
          # Copy install script
          cp release/install.sh dist/
          
          # Copy completions if they exist
          if [ -d completions ]; then
            cp completions/* dist/
          fi
          
          # Create archive
          cd dist
          tar -czf ../reap-${{ matrix.target }}.${{ matrix.archive }} *

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reap-${{ matrix.target }}
          path: reap-${{ matrix.target }}.${{ matrix.archive }}

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run tests
        run: cargo test --release --locked --all-features

      - name: Run clippy
        run: cargo clippy --all-features -- -D warnings

      - name: Check formatting
        run: cargo fmt -- --check

  release:
    name: Create Release
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts to release directory
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -exec mv {} release-assets/ \;

      - name: Generate release notes
        run: |
          # Extract version from tag or input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "# Reap $VERSION" > release-notes.md
          echo "" >> release-notes.md
          
          # Extract changelog entry for this version
          if grep -q "## \[$VERSION\]" CHANGELOG.md; then
            sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | head -n -1 >> release-notes.md
          else
            echo "Release notes not found in CHANGELOG.md for version $VERSION" >> release-notes.md
          fi
          
          echo "" >> release-notes.md
          echo "## Installation" >> release-notes.md
          echo "" >> release-notes.md
          echo "### From AUR" >> release-notes.md
          echo '```bash' >> release-notes.md
          echo 'yay -S reap  # or your favorite AUR helper' >> release-notes.md
          echo '```' >> release-notes.md
          echo "" >> release-notes.md
          echo "### Manual Installation" >> release-notes.md
          echo '```bash' >> release-notes.md
          echo 'curl -sSL https://github.com/reap-project/reap/releases/download/$VERSION/install.sh | bash' >> release-notes.md
          echo '```' >> release-notes.md
          echo "" >> release-notes.md
          echo "### From Binary" >> release-notes.md
          echo "Download the appropriate binary for your architecture and extract it to your PATH." >> release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          name: Reap ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          body_path: release-notes.md
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-aur:
    name: Publish to AUR
    needs: [release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name, '-')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH for AUR
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SSH_KEY }}" > ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts

      - name: Clone AUR repository
        run: |
          git clone ssh://aur@aur.archlinux.org/reap.git aur-reap
          cd aur-reap
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Update PKGBUILD
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          
          # Download source tarball to calculate checksum
          curl -L "https://github.com/reap-project/reap/archive/v$VERSION.tar.gz" -o "reap-$VERSION.tar.gz"
          CHECKSUM=$(sha256sum "reap-$VERSION.tar.gz" | cut -d' ' -f1)
          
          # Update PKGBUILD
          cd aur-reap
          cp ../release/PKGBUILD .
          sed -i "s/pkgver=.*/pkgver=$VERSION/" PKGBUILD
          sed -i "s/sha256sums=('SKIP')/sha256sums=('$CHECKSUM')/" PKGBUILD
          
          # Update .SRCINFO
          makepkg --printsrcinfo > .SRCINFO

      - name: Commit and push to AUR
        run: |
          cd aur-reap
          git add PKGBUILD .SRCINFO
          git commit -m "Update to version ${GITHUB_REF#refs/tags/v}"
          git push origin master
        env:
          GIT_SSH_COMMAND: "ssh -i ~/.ssh/aur"